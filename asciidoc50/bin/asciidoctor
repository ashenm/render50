#!/usr/bin/env ruby

require 'rubygems' if RUBY_VERSION < '1.9'

# DJM
$LOAD_PATH.unshift(File.join File.dirname(__FILE__), '../lib/coderay-master/lib')
$LOAD_PATH.unshift(File.join File.dirname(__FILE__), '../lib/thread_safe-master/lib')

# DJM
$LOAD_PATH.unshift(File.join File.dirname(__FILE__), '../lib/asciidoctor-master/lib')
require 'asciidoctor'
require 'asciidoctor/cli'

# DJM: ../lib/asciidoctor/lib/asciidoctor/document.rb
require 'asciidoctor/document'
module Asciidoctor
  class Document < AbstractBlock
    class Title

      # don't split titles with ':' into title and subtitle
      def initialize val, opts = {}
        @combined = @main = val
        @subtitle = "This is CS50. Harvard University. Fall 2014."
      end

    end
  end
end

# DJM: ../lib/asciidoctor/lib/asciidoctor/converter/html5.rb
require 'asciidoctor/converter/html5'
module Asciidoctor
  class Converter::Html5Converter < Converter::BuiltIn
    def video node
      xml = node.document.attr? 'htmlsyntax', 'xml'
      id_attribute = node.id ? %( id="#{node.id}") : nil
      classes = ['videoblock', node.style, node.role].compact
      class_attribute = %( class="#{classes * ' '}")
      title_element = node.title? ? %(\n<div class="title">#{node.captioned_title}</div>) : nil
      width_attribute = (node.attr? 'width') ? %( width="#{node.attr 'width'}") : nil
      height_attribute = (node.attr? 'height') ? %( height="#{node.attr 'height'}") : nil
      case node.attr 'poster'
      when 'vimeo'
        start_anchor = (node.attr? 'start') ? "#at=#{node.attr 'start'}" : nil
        delimiter = '?'
        autoplay_param = (node.option? 'autoplay') ? "#{delimiter}autoplay=1" : nil
        delimiter = '&amp;' if autoplay_param
        loop_param = (node.option? 'loop') ? "#{delimiter}loop=1" : nil
        %(<div#{id_attribute}#{class_attribute}>#{title_element}
<div class="content">
<iframe#{width_attribute}#{height_attribute} src="//player.vimeo.com/video/#{node.attr 'target'}#{start_anchor}#{autoplay_param}#{loop_param}" frameborder="0"#{append_boolean_attribute 'webkitAllowFullScreen', xml}#{append_boolean_attribute 'mozallowfullscreen', xml}#{append_boolean_attribute 'allowFullScreen', xml}></iframe>
</div>
</div>)
      when 'youtube'
        start_param = (node.attr? 'start') ? "&amp;start=#{node.attr 'start'}" : nil
        end_param = (node.attr? 'end') ? "&amp;end=#{node.attr 'end'}" : nil
        autoplay_param = (node.option? 'autoplay') ? '&amp;autoplay=1' : nil
        loop_param = (node.option? 'loop') ? '&amp;loop=1' : nil
        controls_param = (node.option? 'nocontrols') ? '&amp;controls=0' : nil
        list_param = (node.attr? 'list') ? "&amp;list=#{node.attr 'list'}" : nil # DJM: add support for list=
        playlist_param = (node.attr? 'playlist') ? "&amp;playlist=#{node.attr 'playlist'}" : nil # DJM: add support for playlist=
        %(<div#{id_attribute}#{class_attribute}>#{title_element}
<div class="content">
<iframe#{width_attribute}#{height_attribute} src="https://www.youtube.com/embed/#{node.attr 'target'}?rel=0#{start_param}#{end_param}#{autoplay_param}#{loop_param}#{controls_param}#{list_param}#{playlist_param}" frameborder="0"#{(node.option? 'nofullscreen') ? nil : (append_boolean_attribute 'allowfullscreen', xml)}></iframe>
</div>
</div>)
      else
        poster_attribute = %(#{poster = node.attr 'poster'}).empty? ? nil : %( poster="#{node.media_uri poster}")
        time_anchor = ((node.attr? 'start') || (node.attr? 'end')) ? %(#t=#{node.attr 'start'}#{(node.attr? 'end') ? ',' : nil}#{node.attr 'end'}) : nil
        %(<div#{id_attribute}#{class_attribute}>#{title_element}
<div class="content">
<video src="#{node.media_uri(node.attr 'target')}#{time_anchor}"#{width_attribute}#{height_attribute}#{poster_attribute}#{(node.option? 'autoplay') ? (append_boolean_attribute 'autoplay', xml) : nil}#{(node.option? 'nocontrols') ? nil : (append_boolean_attribute 'controls', xml)}#{(node.option? 'loop') ? (append_boolean_attribute 'loop', xml) : nil}>
Your browser does not support the video tag.
</video>
</div>
</div>)
      end
    end
  end
end

# DJM: ../lib/asciidoctor/lib/asciidoctor/converter/docbook5.rb
require 'asciidoctor/converter/docbook5'
module Asciidoctor
  class Converter::DocBook5Converter < Converter::BuiltIn

    def document node
      result = []
      root_tag_name = node.doctype
      result << '<?xml version="1.0" encoding="UTF-8"?>'
      if (doctype_line = doctype_declaration root_tag_name)
        result << doctype_line
      end
      result << '<?asciidoc-toc?>' if node.attr? 'toc'
      result << '<?asciidoc-numbered?>' if node.attr? 'sectnums'

      # DJM: add support for Hacker Editions
      result << '<?cs50-hacker?>' if node.attr? 'hacker'

      lang_attribute = (node.attr? 'nolang') ? nil : %( lang="#{node.attr 'lang', 'en'}")
      result << %(<#{root_tag_name}#{document_ns_attributes node}#{lang_attribute}>)
      result << (document_info_element node, root_tag_name)
      result << node.content if node.blocks?
      unless (footer_docinfo = node.docinfo :footer).empty?
        result << footer_docinfo
      end
      result << %(</#{root_tag_name}>)

      result * EOL
    end

    def video node
      case node.attr 'poster'
      when 'vimeo'
        start_anchor = (node.attr? 'start') ? "#at=#{node.attr 'start'}" : nil
        url = "http://vimeo.com/#{node.attr 'target'}#{start_anchor}"
        %(<ulink url="#{url}">#{url}</ulink>)
      when 'youtube'
        delimiter = '?'
        start_param = (node.attr? 'start') ? "#{delimeter}start=#{node.attr 'start'}" : nil
        delimiter = '&amp;' if start_param
        end_param = (node.attr? 'end') ? "#{delimeter}end=#{node.attr 'end'}" : nil
        delimiter = '&amp;' if end_param
        list_param = (node.attr? 'list') ? "&amp;list=#{node.attr 'list'}" : nil
        url = "https://www.youtube.com/watch?v=#{node.attr 'target'}#{start_param}#{end_param}#{list_param}"
        %(<ulink url="#{url}">#{url}</ulink>)
      else
        time_anchor = ((node.attr? 'start') || (node.attr? 'end')) ? %(#t=#{node.attr 'start'}#{(node.attr? 'end') ? ',' : nil}#{node.attr 'end'}) : nil
        url = "#{node.media_uri(node.attr 'target')}#{time_anchor}"
        %(<ulink url="#{url}">#{url}</ulink>)
      end
    end
  end
end

invoker = Asciidoctor::Cli::Invoker.new ARGV
GC.start
invoker.invoke!
exit invoker.code
